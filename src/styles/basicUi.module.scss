// Define gradient button styles
@import "./mdiIcons.module.scss";

@mixin button {
  font-size: 0.875rem ;
  line-height: 1 !important;
  display: inline-block !important;
  font-weight: 600 !important;
  color: white !important;
  padding: 0.875rem 2.5rem !important;
  cursor: pointer;
  width: 178px !important;
  :hover {
    opacity: 0.8;
  }
  &.lg {
    margin-bottom: 0.75rem;
    text-transform: lowercase;
  }
  &.sm {
    margin-bottom: 1.5rem;
    text-transform: lowercase;
  }
  &.md {
    margin-bottom: 0.75rem;
    text-transform: lowercase;
  }
}
.CardHeading {
  margin-bottom: 2rem;
}
.cardTitle {
  color: #343a40 !important;
  margin-bottom: 0.75rem !important;
  text-transform: capitalize !important;
  font-size: 1.125rem !important;
  font-weight: 600 !important;
}
.secondaryText {
  color: #76838f;
  margin-bottom: 1.5rem;
}
.code {
  color: #fe7c96;
} // Define button styles using mixins and variables
@each $color,
  $gradient
    in (
      primary: var(--primary-gradient),
      secondary: var(--secondary-gradient),
      success: var(--success-gradient),
      info: var(--info-gradient),
      warning: var(--warning-gradient),
      danger: var(--danger-gradient),
      light: var(--light-gradient),
      dark: var(--dark-gradient)
    )
{
  .btn-gradient-#{$color} {
    @include button;
    background: $gradient;

    &:hover {
      background: $gradient !important;
    }

    &.outline {
      border: 2px solid var(--#{$color}-color) !important;
      color: var(--#{$color}-color) !important;
    }
    &.hoverEffect {
      background-color: transparent !important;
      &:hover {
        color: black !important;
      }
    }
  }

  @if ($color == "light") {
    .btn-gradient-#{$color} {
      color: #343a40 !important;
      &.outline {
        color: #343a40 !important;
      }
    }
  }
}

// Define button styles using mixins and variables
@each $color,
  $colorValue
    in (
      primary: var(--primary-color),
      secondary: var(--secondary-color),
      success: var(--success-color),
      info: var(--info-color),
      warning: var(--warning-color),
      danger: var(--danger-color),
      light: var(--light-color),
      dark: var(--dark-color)
    )
{
  .btn-#{$color} {
    @include button;
    background: $colorValue !important;
  }
  .btn-normal-#{$color} {
    background: $colorValue !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 0.875rem 2.5rem !important;
  }
  @if ($color == "light") {
    .btn-normal-#{$color} {
      color: #343a40 !important;
    }
    .btn-#{$color} {
      color: #343a40 !important;
    }
  }
}
@each $color,
  $colorValue
    in (
      primary: var(--primary-color),
      secondary: var(--secondary-color),
      success: var(--success-color),
      info: var(--info-color),
      warning: var(--warning-color),
      danger: var(--danger-color),
      light: var(--dark-color),
      dark: var(--dark-color)
    )
{
  .btn-inverse-#{$color} {
    @include button;
    background-color: rgba($colorValue, 0.3) !important;
    color: $colorValue !important;

    &:hover {
      background-color: $colorValue !important;
      color: white !important;

      border: 2px solid $colorValue !important;
    }
  }
}
// Additional button classes
.btnLink {
  @include button;
  background: transparent;
  color: blue !important;
}

//IconButtons

.IconButtonsPart {
  display: flex;
  margin-top: 2rem;
  justify-content: center !important;
  flex-wrap: nowrap !important;
  &.flexRow {
    display: flex;
    flex-direction: column;
  }
}
@mixin buttonIcon {
  width: 40px !important;
  height: 40px !important;
  padding: 0 !important;
  margin-right: 1rem !important;
  transition: opacity 0.3s ease;
  &.rounded {
    border-radius: 50% !important;
  }
}

@each $color,
  $colorValue
    in (
      Primary: var(--primary-gradient),
      Success: var(--success-gradient),
      Info: var(--info-gradient),
      Danger: var(--danger-gradient),
      Dark: var(--dark-gradient)
    )
{
  .gradient#{$color} {
    @include buttonIcon;
    background-color: $colorValue !important;
  }
}
@each $color,
  $colorValue
    in (
      Primary: var(--primary-color),
      Success: var(--success-color),
      Info: var(--info-color),
      Danger: var(--danger-color),
      Dark: var(--dark-color)
    )
{
  .inverse#{$color} {
    @include buttonIcon;
    background-color: rgba($colorValue, 0.3) !important;
    color: $colorValue !important;

    &:hover {
      background-color: $colorValue !important;
      color: white !important;

      border: 2px solid $colorValue !important;
    }
  }
}
@each $color,
  $colorValue
    in (
      Primary: var(--primary-color),
      Secondary: var(--secondary-color),
      Success: var(--success-color),
      Info: var(--info-color),
      Danger: var(--danger-color),
      Dark: var(--dark-color)
    )
{
  .outline#{$color} {
    @include buttonIcon;
    border: 2px solid $colorValue !important;
    color: $colorValue !important;
  }
}

//Typography

.IconSuccess{
  color: var(--success-color);
}
.IconWarning{
  color: var(--warning-color);
}
.IconError{
  color: var(--danger-color);
}
.Primary{
  color: var(--primary-color);
}
.blockquoteSymbol {
  margin-right: 2px;
  
}

.blockquoteSymbol::before {
  content: '\2014\00A0'; /* Unicode for em dash and space */

}
.lead{
  font-size: 1.25rem !important;
    font-weight: 300 !important;
}
.bold{
  font-weight: bold !important;
}
.mb2{
  margin-bottom: 16px !important;
}
.addressStyle{
  font-style:normal;
}
@each $color, $colorValue in (
  Primary: var(--primary-color),
  Secondary: var(--secondary-color),
  Success: var(--success-color),
  Info: var(--info-color),
  Danger: var(--danger-color),
  Dark: var(--dark-color),
  Warning:var(--warning-color),
  Light:var(--light-color),
  Muted:var(--text-muted)
) {
  .#{$color} {
    color: $colorValue !important;
    // Add any additional styles as needed
    @if  ($color == "Light") {
      background-color: var(--dark-color) !important;
    }
  }
 
}
.White{
  color: var(--white) !important;
  background-color: var(--dark-color) !important;
}
